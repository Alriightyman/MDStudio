<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:reskeys="clr-namespace:MLib.Themes;assembly=MLib"                    
                    xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit">

	<Style x:Key="CloseButton" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ToolTip" Value="Close"/>
		<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
		<Setter Property="Foreground" Value="{DynamicResource SystemButtonsForeground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<Path Width="46" Height="32" StrokeThickness="1" Stroke="{TemplateBinding Foreground}" Data="M 18,11 27,20 M 18,20 27,11" Margin="0,2,0,0"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMouseOverBackground}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
						</Trigger>
						<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaximizeButton" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="ToolTip" Value="Maximize"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
		<Setter Property="Foreground" Value="{DynamicResource SystemButtonsForeground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<Path x:Name="MaximizePath" Width="46" Height="32" Data="M 18.5,10.5 H 27.5 V 19.5 H 18.5 Z" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Margin="0,2,0,0"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMouseOverBackground}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
						</Trigger>
						<DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
							<Setter Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RestoreDownButton" TargetType="{x:Type Button}">
		<Setter Property="Visibility" Value="Collapsed"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ToolTip" Value="Restore Down"/>
		<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
		<Setter Property="Foreground" Value="{DynamicResource SystemButtonsForeground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<Path x:Name="RestoreDownPath" Width="46" Height="32" Data="M 18.5,12.5 H 25.5 V 19.5 H 18.5 Z M 20.5,12.5 V 10.5 H 27.5 V 17.5 H 25.5" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Margin="0,2,0,0"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMouseOverBackground}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
							<Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
						</Trigger>
						<DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
							<Setter Property="Visibility" Value="Visible"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style x:Key="MinimizeButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTip" Value="Minimize"/>
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Foreground" Value="{DynamicResource SystemButtonsForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Path Width="46" Height="32" StrokeThickness="1" Stroke="{TemplateBinding Foreground}" Data="M 18,15 H 28" Margin="0,2,0,0"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMouseOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBackgroundKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBorderKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonTextKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16,3,16,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="Presenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonTextDisabledKey}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBackgroundKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBorderKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBackgroundHoverKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBorderHoverKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonTextHoverKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBackgroundPressedKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonBorderPressedKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonTextPressedKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlAccentBrushKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBorderKey}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ToolBarButton" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlButtonIsDefaultBorderBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="avalonedit:SearchPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonedit:SearchPanel}">
                    <Border Background="{DynamicResource HeaderBackground }" 
                            BorderBrush="{DynamicResource HeaderBackground}" 
                            BorderThickness="1" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Arrow">
                        <StackPanel Orientation="Horizontal">
                            <TextBox Name="PART_searchTextBox" Focusable="True" Width="150" Height="24" Margin="3,3,3,0">
                                <TextBox.Text>
                                    <Binding Path="SearchPattern" RelativeSource="{RelativeSource TemplatedParent}" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ExceptionValidationRule />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <avalonedit:DropDownButton Height="24" Foreground="{DynamicResource ProjectNameForeground}">
                                <avalonedit:DropDownButton.DropDownContent>
                                    <Popup StaysOpen="False" Name="PART_dropdownPopup">
                                        <Border Background="{DynamicResource HeaderBackground}" 
                                                BorderBrush="{DynamicResource HeaderBackground}" BorderThickness="1">
                                            <StackPanel Orientation="Vertical">
                                                <CheckBox IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.MatchCaseText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
                                                <CheckBox IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.MatchWholeWordsText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
                                                <CheckBox IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.UseRegexText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
                                            </StackPanel>
                                        </Border>
                                    </Popup>
                                </avalonedit:DropDownButton.DropDownContent>
                            </avalonedit:DropDownButton>
                            <Button Margin="3" Height="24" Width="24" Command="avalonedit:SearchCommands.FindPrevious" ToolTip="{Binding Localization.FindPreviousText, RelativeSource={RelativeSource TemplatedParent}}"
                                    Foreground="{DynamicResource ProjectNameForeground}" Padding="0">
                                <Image Width="16" Height="16" Stretch="Fill" Source="pack://application:,,,/Resources/BackArrow.png"/>
                            </Button>
                            <Button Margin="3" Height="24" Width="24" Command="avalonedit:SearchCommands.FindNext" ToolTip="{Binding Localization.FindNextText, RelativeSource={RelativeSource TemplatedParent}}"
                                    Foreground="{DynamicResource ProjectNameForeground}" Padding="0">
                                <Image Width="16" Height="16" Stretch="Fill" Source="pack://application:,,,/Resources/ForwardArrow.png"/>
                            </Button>
                            <Button Height="16" Width="16" HorizontalAlignment="Right" VerticalAlignment="Top" Command="avalonedit:SearchCommands.CloseSearchPanel"
							        VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Focusable="False" Padding="0">
                                <Path Data="M 0,0 L 8,8 M 8,0 L 0,8" Stroke="{DynamicResource ProjectNameForeground}" StrokeThickness="1" />
                            </Button>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="DataGrid">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.GrayNormalBrushKey}}" />
        <Setter Property="RowBackground" Value="{x:Null}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{x:Null}" />
    </Style>
    <Style x:Key="DataGridCellStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.GrayNormalBrushKey}}" />
    </Style>
    <Style x:Key="DataGridCellStyleNoBorders" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
    </Style>
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.GrayNormalBrushKey}}" />
    </Style>
    <Style TargetType="DataGridCellsPanel">
        <Setter Property="Background" Value="{x:Null}" />
    </Style>
    <Style TargetType="DataGridCellsPresenter">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.GrayNormalBrushKey}}" />
    </Style>
    <Style TargetType="DataGridRow">
        <Setter Property="Foreground" Value="{DynamicResource ProjectNameForeground}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.GrayNormalBrushKey}}" />
    </Style>
</ResourceDictionary>